package 기초조지자;

public class No_1 {
//			/*함수,변수지정*/    	/*문자열로 배열하겠다.*/
	public static void main(String[] args) {
// /*접근제한*/ 	 /* 함수가 끝날 때 리턴값이 없다*/
//		1. main 함수는 모든 실행프로그램의 기본이 되는 함수(= 어디에서나 접근이 가능)

//		2. 접근제한자		기능

//		public			모든 곳에서 접근 가능
//		private			자기 자신 클래스에서만 접근 가능
//		protected		자기 자신 클래스와 상속된 클래스에서 접근 가능

//		3. 변수나 함수를 메모리에 할당하는 방법이 2가지

//		첫번째는 static 영역에 선언하는 것이고, 다른 하나는 heap 영역에 선언(new 연산자)하는 것

//		4. void 는 "함수가 끝날 때 리턴값이 없다

//		 main 함수가 종료되면(혹은 비정상적으로 죽으면) 프로그램이 종료됩니다.
//		 프로그램 자체가 종료되기 때문에, return 값의 의미를 지닐수가 없습니다.
//		 반면, 일반함수의 경우 정상적 혹은 비정상적인 경우 리턴값을 변수에 담아 다음 단계를 진행할 수 있죠.
//		 그래서 main 함수는 void 를 의무적으로 사용해야 하고 return 값을 가지기 위해 void 대신 다른 타입을 사용하는 경우 에러가 발생

//		5. args 문자열을 배열로 사용하겠다 라는 의미입니다.
//		 args는 변수명이기 때문에 꼭 args 가 아니어도 상관은 없으나, String[] args 구문 자체를 뺄 수는 없습니다.

//		
//		
//		
//		
//		
//		
//		
//		
//		 클래스 = 	변수 	+	 함수 (= 메소드)
//				-멤버변수									☆ 매개변수 : 함수에서만 사용하는 변수 				
//				  -정적변수(Static)
//				  -인스턴스변수 :객체내 생성함 (하나의 객체에만 사용가능)
//				  
//		
//				 ex)	X = new int[5] ;
//										↓는 (내용물 = 값) Heap 영역에 보관됨
//						X □ 	=>	 □□□□□  라는거임
//		                  ↑는 reference (참고) 이고 "주소값" 이들어가는거임 (주소값은 Stack 영역에 저장된다.)
//		|밑에는	|
//		|★DATA	|
//		|ㅡㅡㅡㅡㅡ
//		|정적영역	|  => static (정적변수): 컴파일 될때 확정 /	 객체들이 공유하는 변수 	  / 
//		|ㅡㅡㅡㅡ	|
//		|동적영역	| 
//		|		|
//		|HEAP	|	=> New 로 만든 객체의 변수를 모음 (내용물=값)  =>	□□□□□ 로표현
//		|		| 
//		|		|
//		|		|
//		|		|
//		|STACK	|	=> reference(참조) : "주소값"이들어감
//										"지역변수" 저장하는 곳이기도 하다.
//										"실행=Call" 될때 확정
//		

	}

}
